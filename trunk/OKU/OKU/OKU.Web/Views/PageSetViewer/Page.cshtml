@model OKU.Web.Models.PageSetViewer.PageModel
@using OKU.Core.Entities;
@using OKU.Web.Models.PageSetViewer;
@{
    string pageHeader = string.Format("Set {0} - stranica {1} / {2}", this.Model.PageSet.Code, this.Model.CurrentPage, this.Model.TotalPages);
    ViewBag.Title = this.Html.PageTitle(pageHeader);
}
<script src="@Url.Content("~/Scripts/dynamic-map-1.0.0.js")" type="text/javascript"></script>
<link href="@Url.Content("~/Content/PageSetViewer.css")" rel="stylesheet" type="text/css" />

<h2>@pageHeader</h2>
@using (Html.BeginForm())
{
    <div class="page">
        <div class="page-header">
            <input type="hidden" value="@this.Model.CurrentPage.ToString()" name="current-page" id="current-page" />
            @if (this.Model.DebugMode)
            {
                <div class="debug">
                    Page.StructureDescriminator = @this.Model.Page.StructureDescriminator</div>
            }
            @if (this.Model.Page.StructureDescriminator == Enums.StructureDescriminator.Attendee)
            {

            }
            else if (this.Model.Page.StructureDescriminator == Enums.StructureDescriminator.MaterialVerison)
            {
                if (this.Model.Page.MaterialVersion != null)
                {
                <span>@this.Model.Page.MaterialVersion.Code</span>
                }
                else if (this.Model.DebugMode)
                {
                <div class="debug">
                    Page.MaterialVersion is null. Not null reference expected.</div>
                }
            }
            else if (this.Model.Page.StructureDescriminator == Enums.StructureDescriminator.Cluster)
            {
                if (this.Model.Page.Cluster != null)
                {
                <span>@this.Model.Page.Cluster.Code</span>
                }
                else if (this.Model.DebugMode)
                {
                <div class="debug">
                    Page.Cluster is null. Not null reference expected.</div>
                }
            }
            else if (this.Model.Page.StructureDescriminator == Enums.StructureDescriminator.Unit)
            {
                if (this.Model.Page.Unit != null)
                {
                <span>@this.Model.Page.Unit.Code</span>
                }
                else if (this.Model.DebugMode)
                {
                <div class="debug">
                    Page.Unit is null. Not null reference expected.</div>
                }
            }
            else if (this.Model.Page.StructureDescriminator == Enums.StructureDescriminator.Item)
            {
                if (this.Model.Page.Item != null)
                {
                <span>@this.Model.Page.Item.Code</span>
                    if (this.Model.Page.Item.ShowItemBase)
                    {
                <p>@this.Model.Page.Item.ItemBase</p>
                    }
                    if (this.Model.Page.Item.ShowItemAnswer)
                    {
                <p>@this.Model.Page.Item.ItemAnswer</p>
                    }
                    if (this.Model.Page.Item.ShowItemSolution)
                    {
                <p>@this.Model.Page.Item.ItemSolution</p>
                    }
                }
                else if (this.Model.DebugMode)
                {
                <div class="debug">
                    Page.Item is null. Not null reference expected.</div>
                }
            }
        </div>
        <div  style="width: 200px; margin: 0 auto; padding: 10px;">
            <input type="submit" id="previous-page" name="previous-page" value="Prethodna" style="float: left;" />
            <input type="submit" id="next-page" name="next-page" value="Sljedeća" style="float: right;" />
        </div>
        <div class="validation-summary">
            @this.Html.Raw(Model.ValidationSummary)
        </div>
        <div class="view-item-set-container">
            @foreach (var viewItemSet in this.Model.Page.ViewItemSets.OrderBy(x => x.OrdinalPosition))
            {
                this.Html.RenderPartial("ViewItemSetPartial", new ViewItemSetModel(this.Model.DebugMode, viewItemSet));
            }
        </div>
    </div>
    
}
<div id="point-details" class="overlay">
    <div class="overlay-content">
        <form id="ajax-form">
        <fieldset>
            <legend></legend>
            <div id="ajax-form-content">
            </div>
        </fieldset>
        </form>
        <div style="width: 200px; height:500px margin: 0 auto;">
            <input type="button" id="save" value="Spremi" style="float: left;" onclick="savePointDetails();" />
            <input type="button" id="delete" value="Obriši" style="float: left;" onclick="deletePoint();" />
            @*<input type="button" id="close" value="Zatvori" style="float: right;" onclick="closePointDetails();" />*@
        </div>
    </div>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        $('.dynamic-map').dynamicMap({
            addPointServerUrl: '@Url.Action("AddGridPoint", "PageSetViewer")',
            removePointServerUrl: '@Url.Action("RemoveGridPoint", "PageSetViewer")',
            pointClick: pointClickHandler,
            mapClick: mapClickHandler
        });
    });

    function pointClickHandler(map, point) {
        openPointDetails(map, point);
    }

    function mapClickHandler(map, point, data) {
//        alert('DEBUG: Point ' + point.attr('id') + ' added to map ' + map.attr('id'));
//        alert('DEBUG: Looking for element with id ' + data.viewItemIdToRefresh + ' and setting value ' + data.viewItemValueToRefresh);
        $('#' + data.viewItemIdToRefresh).val(data.viewItemValueToRefresh);
        openPointDetails(map, point);
    }

    function openPointDetails(map, point) {
        var pointDetails = $('#point-details').first();
        pointDetails.data('map', map);
        pointDetails.data('point', point);

        $('.overlay-content', pointDetails).addClass('loading');
        $('#ajax-form-content').html('');

        $.post('@Url.Action("OpenGridPoint","PageSetViewer")', { viewItemId: map.attr('id'), pointId: point.attr('id') }, 
        function (data, textStatus, jqXHR) {
            $('.overlay-content', pointDetails).removeClass('loading');
            $('#ajax-form-content').html(data);
        });

        pointDetails.show();
    }

    function closePointDetails() {
        var pointDetails = $('#point-details').first();
        pointDetails.data('map', null);
        pointDetails.data('point', null);
        pointDetails.hide();
    }

    function deletePoint() {
        var pointDetails = $('#point-details').first();
        var map = pointDetails.data('map');
        var point = pointDetails.data('point');

        closePointDetails();

        removeDynamicMapPoint(map.attr('id'), point.attr('id'));
    }

    function savePointDetails() {
        var pointDetails = $('#point-details').first();
        var map = pointDetails.data('map');
        var point = pointDetails.data('point');

        $('.overlay-content', pointDetails).addClass('loading');

        var data = $('#ajax-form').serialize();

        var extendedData = 'viewItemId=' +  map.attr('id') + '&pointId=' + point.attr('id') + '&' + data;

        $.post('@Url.Action("SaveGridPoint","PageSetViewer")', extendedData, function (data, textStatus, jqXHR) {
            $('.overlay-content', pointDetails).removeClass('loading');
            if (data.completedSuccessfully) {
                closePointDetails();
            }
            else {
                alert(data.errorMessage);
            }
        });
    }
</script>

    


