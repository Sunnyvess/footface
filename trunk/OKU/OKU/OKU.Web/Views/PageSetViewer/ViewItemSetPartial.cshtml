@model OKU.Web.Models.PageSetViewer.ViewItemSetModel
@using OKU.Core.Entities;
@using OKU.Web.Models.PageSetViewer;
@{
    this.Layout = null;
}
<div class="view-item-set">
    <div class="view-item-set-header" style="visibility:hidden">
        @if (this.Model.DebugMode)
        {
            <div class="debug">
                ViewItemSet.StructureDescriminator = @this.Model.ViewItemSet.StructureDescriminator</div>
        }
        @if (this.Model.ViewItemSet.StructureDescriminator == Enums.StructureDescriminator.Attendee)
        {

        }
        else if (this.Model.ViewItemSet.StructureDescriminator == Enums.StructureDescriminator.MaterialVerison)
        {
            if (this.Model.ViewItemSet.MaterialVersion != null)
            {
            <span>@this.Model.ViewItemSet.MaterialVersion.Code</span>
            }
            else if (this.Model.DebugMode)
            {
            <div class="debug">
                ViewItemSet.MaterialVersion is null. Not null reference expected.</div>
            }
        }
        else if (this.Model.ViewItemSet.StructureDescriminator == Enums.StructureDescriminator.Cluster)
        {
            if (this.Model.ViewItemSet.Cluster != null)
            {
            <span>@this.Model.ViewItemSet.Cluster.Code</span>
            }
            else if (this.Model.DebugMode)
            {
            <div class="debug">
                ViewItemSet.Cluster is null. Not null reference expected.</div>
            }
        }
        else if (this.Model.ViewItemSet.StructureDescriminator == Enums.StructureDescriminator.Unit)
        {
            if (this.Model.ViewItemSet.Unit != null)
            {
            <span>@this.Model.ViewItemSet.Unit.Code</span>
            }
            else if (this.Model.DebugMode)
            {
            <div class="debug">
                ViewItemSet.Unit is null. Not null reference expected.</div>
            }
            
        }
        else if (this.Model.ViewItemSet.StructureDescriminator == Enums.StructureDescriminator.Item)
        {
            if (this.Model.ViewItemSet.Item != null)
            {
            <span>@this.Model.ViewItemSet.Item.Code</span>
                if (this.Model.ViewItemSet.Item.ShowItemBase)
                {
            <p>@this.Model.ViewItemSet.Item.ItemBase</p>
                }
                if (this.Model.ViewItemSet.Item.ShowItemAnswer)
                {
            <p>@this.Model.ViewItemSet.Item.ItemAnswer</p>
                }
                if (this.Model.ViewItemSet.Item.ShowItemSolution)
                {
            <p>@this.Model.ViewItemSet.Item.ItemSolution</p>
                }
            }
            else if (this.Model.DebugMode)
            {
            <div class="debug">
                ViewItemSet.Item is null. Not null reference expected.</div>
            }
        }
   </div>
    <div class="view-item-container">
        <h3>@this.Model.ViewItemSet.Description</h3>
        @foreach (var viewItem in this.Model.ViewItemSet.ViewItems.OrderBy(x => x.OrdinalPosition))
        {            
            if (viewItem.ViewItemDescriminator == Enums.ViewItemDescriminator.CodePlan)
            {
                this.Html.RenderPartial("ViewItemCodePlanPartial", new ViewItemModel(this.Model.DebugMode, viewItem));
            }
            else if (viewItem.ViewItemDescriminator == Enums.ViewItemDescriminator.Material)
            {
                this.Html.RenderPartial("ViewItemMaterialPartial", new ViewItemModel(this.Model.DebugMode, viewItem));
            }
            else if (viewItem.ViewItemDescriminator == Enums.ViewItemDescriminator.Unit)
            {
                this.Html.RenderPartial("ViewItemUnitPartial", new ViewItemModel(this.Model.DebugMode, viewItem));
            }
            else if (viewItem.ViewItemDescriminator == Enums.ViewItemDescriminator.Item)
            {
                this.Html.RenderPartial("ViewItemItemPartial", new ViewItemModel(this.Model.DebugMode, viewItem));
            }           
        }
    </div>
</div>
